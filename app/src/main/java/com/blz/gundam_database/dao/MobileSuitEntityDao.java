package com.blz.gundam_database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.blz.gundam_database.entities.MobileSuitEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOBILE_SUIT_ENTITY".
*/
public class MobileSuitEntityDao extends AbstractDao<MobileSuitEntity, String> {

    public static final String TABLENAME = "MOBILE_SUIT_ENTITY";

    /**
     * Properties of entity MobileSuitEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property WorkId = new Property(1, String.class, "workId", false, "WORK_ID");
        public final static Property OriginalName = new Property(2, String.class, "originalName", false, "ORIGINAL_NAME");
        public final static Property ModelSeries = new Property(3, String.class, "modelSeries", false, "MODEL_SERIES");
        public final static Property Scale = new Property(4, String.class, "scale", false, "SCALE");
        public final static Property ItemNo = new Property(5, String.class, "itemNo", false, "ITEM_NO");
        public final static Property LaunchDate = new Property(6, String.class, "launchDate", false, "LAUNCH_DATE");
        public final static Property Price = new Property(7, String.class, "price", false, "PRICE");
        public final static Property Images = new Property(8, String.class, "images", false, "IMAGES");
        public final static Property HeadImage = new Property(9, String.class, "headImage", false, "HEAD_IMAGE");
        public final static Property Version = new Property(10, String.class, "version", false, "VERSION");
        public final static Property Manufacturer = new Property(11, String.class, "manufacturer", false, "MANUFACTURER");
        public final static Property PrototypeMaster = new Property(12, String.class, "prototypeMaster", false, "PROTOTYPE_MASTER");
        public final static Property BoxImage = new Property(13, String.class, "boxImage", false, "BOX_IMAGE");
        public final static Property LlType = new Property(14, String.class, "llType", false, "LL_TYPE");
    };


    public MobileSuitEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MobileSuitEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOBILE_SUIT_ENTITY\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"WORK_ID\" TEXT," + // 1: workId
                "\"ORIGINAL_NAME\" TEXT," + // 2: originalName
                "\"MODEL_SERIES\" TEXT," + // 3: modelSeries
                "\"SCALE\" TEXT," + // 4: scale
                "\"ITEM_NO\" TEXT," + // 5: itemNo
                "\"LAUNCH_DATE\" TEXT," + // 6: launchDate
                "\"PRICE\" TEXT," + // 7: price
                "\"IMAGES\" TEXT," + // 8: images
                "\"HEAD_IMAGE\" TEXT," + // 9: headImage
                "\"VERSION\" TEXT," + // 10: version
                "\"MANUFACTURER\" TEXT," + // 11: manufacturer
                "\"PROTOTYPE_MASTER\" TEXT," + // 12: prototypeMaster
                "\"BOX_IMAGE\" TEXT," + // 13: boxImage
                "\"LL_TYPE\" TEXT);"); // 14: llType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOBILE_SUIT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MobileSuitEntity entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String workId = entity.getWorkId();
        if (workId != null) {
            stmt.bindString(2, workId);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(3, originalName);
        }
 
        String modelSeries = entity.getModelSeries();
        if (modelSeries != null) {
            stmt.bindString(4, modelSeries);
        }
 
        String scale = entity.getScale();
        if (scale != null) {
            stmt.bindString(5, scale);
        }
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(6, itemNo);
        }
 
        String launchDate = entity.getLaunchDate();
        if (launchDate != null) {
            stmt.bindString(7, launchDate);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(8, price);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(9, images);
        }
 
        String headImage = entity.getHeadImage();
        if (headImage != null) {
            stmt.bindString(10, headImage);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(11, version);
        }
 
        String manufacturer = entity.getManufacturer();
        if (manufacturer != null) {
            stmt.bindString(12, manufacturer);
        }
 
        String prototypeMaster = entity.getPrototypeMaster();
        if (prototypeMaster != null) {
            stmt.bindString(13, prototypeMaster);
        }
 
        String boxImage = entity.getBoxImage();
        if (boxImage != null) {
            stmt.bindString(14, boxImage);
        }
 
        String llType = entity.getLlType();
        if (llType != null) {
            stmt.bindString(15, llType);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MobileSuitEntity readEntity(Cursor cursor, int offset) {
        MobileSuitEntity entity = new MobileSuitEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // workId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // originalName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modelSeries
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // scale
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // itemNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // launchDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // images
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // headImage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // version
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // manufacturer
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // prototypeMaster
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // boxImage
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // llType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MobileSuitEntity entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWorkId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOriginalName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModelSeries(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScale(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItemNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLaunchDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImages(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHeadImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVersion(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setManufacturer(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrototypeMaster(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBoxImage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLlType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MobileSuitEntity entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MobileSuitEntity entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
